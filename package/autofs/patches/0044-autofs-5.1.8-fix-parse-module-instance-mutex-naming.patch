autofs-5.1.8 - fix parse module instance mutex naming

From: Ian Kent <raven@themaw.net>

The naming used for parse module instance locks is the same as that
used for map lookup instances. Rename these to make it clear they
are being used in the parse modules.

Signed-off-by: Ian Kent <raven@themaw.net>
---
 CHANGELOG           |    1 +
 modules/parse_amd.c |   28 ++++++++++++++--------------
 modules/parse_sun.c |   20 ++++++++++----------
 3 files changed, 25 insertions(+), 24 deletions(-)

diff --git a/CHANGELOG b/CHANGELOG
index 24a658ba..e60a0fd7 100644
--- a/CHANGELOG
+++ b/CHANGELOG
@@ -41,6 +41,7 @@
 - support SCRAM for SASL binding.
 - ldap_sasl_interactive_bind() needs credentials for auto-detection.
 - fix autofs regression due to positive_timeout.
+- fix parse module instance mutex naming.
 
 19/10/2021 autofs-5.1.8
 - add xdr_exports().
diff --git a/modules/parse_amd.c b/modules/parse_amd.c
index 5090060d..8274c5be 100644
--- a/modules/parse_amd.c
+++ b/modules/parse_amd.c
@@ -39,18 +39,18 @@ int parse_version = AUTOFS_PARSE_VERSION;	/* Required by protocol */
 
 static struct mount_mod *mount_nfs = NULL;
 static int init_ctr = 0;
-static pthread_mutex_t instance_mutex = PTHREAD_MUTEX_INITIALIZER;
+static pthread_mutex_t parse_instance_mutex = PTHREAD_MUTEX_INITIALIZER;
 
-static void instance_mutex_lock(void)
+static void parse_instance_mutex_lock(void)
 {
-	int status = pthread_mutex_lock(&instance_mutex);
+	int status = pthread_mutex_lock(&parse_instance_mutex);
 	if (status)
 		fatal(status);
 }
 
-static void instance_mutex_unlock(void)
+static void parse_instance_mutex_unlock(void)
 {
-	int status = pthread_mutex_unlock(&instance_mutex);
+	int status = pthread_mutex_unlock(&parse_instance_mutex);
 	if (status)
 		fatal(status);
 }
@@ -112,7 +112,7 @@ int parse_init(int argc, const char *const *argv, void **context)
 
 	/* We only need this once.  NFS mounts are so common that we cache
 	   this module. */
-	instance_mutex_lock();
+	parse_instance_mutex_lock();
 	if (mount_nfs)
 		init_ctr++;
 	else {
@@ -121,11 +121,11 @@ int parse_init(int argc, const char *const *argv, void **context)
 		} else {
 			kill_context(ctxt);
 			*context = NULL;
-			instance_mutex_unlock();
+			parse_instance_mutex_unlock();
 			return 1;
 		}
 	}
-	instance_mutex_unlock();
+	parse_instance_mutex_unlock();
 
 	return 0;
 }
@@ -1365,11 +1365,11 @@ static int do_host_mount(struct autofs_point *ap, const char *name,
 		argc = 1;
 	}
 
-	instance_mutex_lock();
+	parse_instance_mutex_lock();
 	status = open_lookup("hosts", MODPREFIX, NULL, argc, pargv, &lookup);
 	if (status != NSS_STATUS_SUCCESS) {
 		debug(ap->logopt, "open lookup module hosts failed");
-		instance_mutex_unlock();
+		parse_instance_mutex_unlock();
 		goto out;
 	}
 
@@ -1381,13 +1381,13 @@ static int do_host_mount(struct autofs_point *ap, const char *name,
 		if (!instance) {
 			error(ap->logopt, MODPREFIX
 			     "failed to create source instance for hosts map");
-			instance_mutex_unlock();
+			parse_instance_mutex_unlock();
 			close_lookup(lookup);
 			goto out;
 		}
 	}
 	instance->lookup = lookup;
-	instance_mutex_unlock();
+	parse_instance_mutex_unlock();
 
 	cache_writelock(source->mc);
 	me = cache_lookup_distinct(source->mc, name);
@@ -2380,12 +2380,12 @@ int parse_done(void *context)
 	int rv = 0;
 	struct parse_context *ctxt = (struct parse_context *) context;
 
-	instance_mutex_lock();
+	parse_instance_mutex_lock();
 	if (--init_ctr == 0) {
 		rv = close_mount(mount_nfs);
 		mount_nfs = NULL;
 	}
-	instance_mutex_unlock();
+	parse_instance_mutex_unlock();
 	if (ctxt)
 		kill_context(ctxt);
 
diff --git a/modules/parse_sun.c b/modules/parse_sun.c
index 56fe4161..4d716b6f 100644
--- a/modules/parse_sun.c
+++ b/modules/parse_sun.c
@@ -41,18 +41,18 @@ int parse_version = AUTOFS_PARSE_VERSION;	/* Required by protocol */
 
 static struct mount_mod *mount_nfs = NULL;
 static int init_ctr = 0;
-static pthread_mutex_t instance_mutex = PTHREAD_MUTEX_INITIALIZER;
+static pthread_mutex_t parse_instance_mutex = PTHREAD_MUTEX_INITIALIZER;
 
-static void instance_mutex_lock(void)
+static void parse_instance_mutex_lock(void)
 {
-	int status = pthread_mutex_lock(&instance_mutex);
+	int status = pthread_mutex_lock(&parse_instance_mutex);
 	if (status)
 		fatal(status);
 }
 
-static void instance_mutex_unlock(void)
+static void parse_instance_mutex_unlock(void)
 {
-	int status = pthread_mutex_unlock(&instance_mutex);
+	int status = pthread_mutex_unlock(&parse_instance_mutex);
 	if (status)
 		fatal(status);
 }
@@ -424,7 +424,7 @@ int parse_init(int argc, const char *const *argv, void **context)
 
 	/* We only need this once.  NFS mounts are so common that we cache
 	   this module. */
-	instance_mutex_lock();
+	parse_instance_mutex_lock();
 	if (mount_nfs)
 		init_ctr++;
 	else {
@@ -432,11 +432,11 @@ int parse_init(int argc, const char *const *argv, void **context)
 			init_ctr++;
 		} else {
 			kill_context(ctxt);
-			instance_mutex_unlock();
+			parse_instance_mutex_unlock();
 			return 1;
 		}
 	}
-	instance_mutex_unlock();
+	parse_instance_mutex_unlock();
 
 	*context = (void *) ctxt;
 
@@ -1728,12 +1728,12 @@ int parse_done(void *context)
 	int rv = 0;
 	struct parse_context *ctxt = (struct parse_context *) context;
 
-	instance_mutex_lock();
+	parse_instance_mutex_lock();
 	if (--init_ctr == 0) {
 		rv = close_mount(mount_nfs);
 		mount_nfs = NULL;
 	}
-	instance_mutex_unlock();
+	parse_instance_mutex_unlock();
 	if (ctxt)
 		kill_context(ctxt);
 
